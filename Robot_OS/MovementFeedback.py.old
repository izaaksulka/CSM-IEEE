import Transform
from Vector import Vector
#import pygame
import time
import Drive
from math import cos, sin, pi

# Number of reading per second
POLL_RATE = 10.0
DELTA_TIME = 1 / POLL_RATE

# Convert mouse distance to feet    
DISTANCE_SCALE = 0.0067
ROTATION_SCALE = 0.900

class MovementFeedback:

    def __init__(self, portA, portB):
        '''
        # Initialize pygame, we use this to keep track of the mouse
        pygame.init()
        screen_w = pygame.display.Info().current_w
        screen_h = pygame.display.Info().current_h
        screen = pygame.display.set_mode( ( 300, 300 ), pygame.NOFRAME )
        self.width, self.height = screen.get_size()
        pygame.mouse.set_pos( self.width/2, self.height/2 ) 
        self.driver = newDriver
        '''       
        
        #self.startPoll = time.time()
        self.lastPoll = time.time()
        self.curPoll = self.lastPoll

        print("Movement Feedback setup done")

    def StartMeasurement(self):
        #self.startPoll = time.time()
        self.lastPoll = time.time()
        self.curPoll = self.lastPoll

    # Soley for dead reckoning,
    # Tells the movement feedback how the motors are running
    # So that we can "measure" the distance it's traveled
    def SetDirection( self, velocity, rotVelocity ):
        self.velocity = velocity
        self.rotVelocity = rotVelocity

    #returns movement value
    def Update(self, rotation):
            
        # For the moment it's dead reckoning,
        # but in a normal situation we would
        # Update and return the sensor value
        self.curPoll = time.time()

        # Only update POLL_RATE times per second
        if self.curPoll - self.lastPoll > DELTA_TIME:

            deltaTime = self.curPoll - self.lastPoll
            
            radRotation = ToRad(rotation)

            distanceTraveled = Vector( self.velocity.inner(Vector(sin(radRotation), cos(radRotation)))  * deltaTime * DISTANCE_SCALE, 
                                       self.velocity.inner(Vector(cos(radRotation), -sin(radRotation))) * deltaTime * DISTANCE_SCALE )

            distanceRotated = self.rotVelocity * deltaTime * ROTATION_SCALE

            self.lastPoll = self.curPoll

            return ( distanceTraveled, distanceRotated )

        # This is weird, but if we're not getting the reading yet, 
        # then we're just reporting no change
        return ( Vector(0, 0), 0 )

def ToRad(angle):
    return angle * pi / 180

'''
        deltaPos = Vector( 0, 0 )
        deltaRot = 0.0;
        # Get the mouse change from pygame
        # Have to do it via event dequeuing
        if time.time() - self.lastPolled > DELTA_TIME:
            for event in pygame.event.get():
                if event.type == pygame.MOUSEMOTION:
                    
                    mPos = pygame.mouse.get_pos()
                    
                    # Get the change in position from the mouse   
                    deltaM = ( mPos[0] - self.width / 2, mPos[1] - self.height / 2 )
                    
                    # Reset the timer for the next poll
                    self.lastPolled = time.time()
                    # Move the mouse back to the middle of the window
                    # so we can't hit the edge of the screen
                    pygame.mouse.set_pos( [ self.width/2, self.height/2 ] )
                    if(drive.GetMovementMode() == TRANSLATE):
                        #print( "Mouse Change: ", deltaPos )
                        deltaPos = self.ToBoardSpace( deltaM )
                        #print( "Robot Change: ", deltaPos )
                    if(drive.GetMovementMode() == ROTATE):
                        deltaRot = self.RotationFromMouse(deltaM);
        
        return Transform.Transform( deltaPos, deltaRot)
'''
'''
    def GetDeltaPos(self):
        movement = self.driver.bodyVel * 0.000001#here, the feedback unit just
        #copies the setting from
        #the driver - this gets replaced when we actually get data from the
        #sensors.
        return movement

    def GetDeltaRot(self):
        #for now I have the rotation constant
        return 0.0

    def ToBoardSpace(self, deltaPos):
        deltaPos = Vector( deltaPos[0], -deltaPos[1] )
        return Vector( deltaPos.inner( Vector(  cos(THETA), -sin(THETA) ) ) * DISTANCE_SCALE, 
                       deltaPos.inner( Vector( -sin(THETA), -cos(THETA) ) ) * DISTANCE_SCALE )

    def RotationFromMouse(self, deltaM):
        rot = deltaM[0] / MOUSE_LOCATION_RADIUS;
        return rot;
'''
